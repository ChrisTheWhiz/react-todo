{"version":3,"sources":["todosData.js","TodoItem.js","TodoCategory.js","App.js","serviceWorker.js","index.js"],"names":["placeholderTodos","projectName","todos","content","isCompleted","TodosService","localStorage","getItem","this","JSON","parse","newTodos","updateLocalStorage","setItem","stringify","clear","TodoItem","props","todo","projectIndex","todoIndex","setCloseButton","handleInputChange","handleInputKeyDown","toggleTodoCompleteAtIndex","handleRemoveCommand","className","onMouseEnter","onMouseLeave","onClick","id","type","value","onChange","e","onKeyDown","TodoCategory","provided","project","key","draggableProps","ref","innerRef","dragHandleProps","map","todoRepo","App","useState","getTodos","setState","setTodos","newState","updateTodos","target","tempState","splice","setTimeout","document","getElementById","focus","temporaryTodos","mode","nextSibling","style","display","setTrashVisibility","el","opacity","forEach","filter","removeCompletedTodos","createNewProject","clearLocalStorage","window","location","reload","onDragEnd","result","destination","source","droppableId","parseInt","index","toString","onDragStart","snapshot","isDraggingOver","droppableProps","placeholder","draggableId","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcf4fa13.chunk.js","sourcesContent":["const placeholderTodos = [\n    {\n        projectName: 'Programming',\n        todos: [\n            {\n                content: 'Learn Hooks',\n                isCompleted: true,\n            },\n            {\n                content: 'Style the app',\n                isCompleted: true,\n            },\n            {\n                content: 'Migrate to TypeScript',\n                isCompleted: false,\n            },\n            {\n                content: 'Create tests',\n                isCompleted: true\n            }\n        ]\n    },\n    {\n        projectName: 'Chores',\n        todos: [\n            {\n                content: 'Clean Keyboard',\n                isCompleted: true,\n            },\n            {\n                content: 'Walk Dog',\n                isCompleted: false,\n            },\n            {\n                content: 'Do dishes',\n                isCompleted: false,\n            },\n        ]\n    },\n    {\n        projectName: 'Groceries',\n        todos: [\n            {\n                content: '1kg Carrots',\n                isCompleted: false,\n            },\n            {\n                content: '2 Cauliflowers',\n                isCompleted: false,\n            },\n            {\n                content: '1kg Button Mushrooms',\n                isCompleted: false,\n            },\n        ]\n    }\n];\n\n\nexport class TodosService {\n    todos;\n\n    constructor() {\n        if (localStorage.getItem('todosData') === null) {\n            this.todos = placeholderTodos;\n        } else {\n            this.todos = JSON.parse(localStorage.getItem('todosData'));\n        }\n    }\n\n    getTodos() {\n        return this.todos;\n    }\n\n    updateTodos(newTodos) {\n        this.todos = newTodos;\n        this.updateLocalStorage();\n    }\n\n    updateLocalStorage() {\n        localStorage.setItem('todosData', JSON.stringify(this.todos));\n    }\n\n    clearLocalStorage() {\n        localStorage.clear();\n    }\n}","import React from 'react';\n\nexport default function TodoItem(props) {\n    const {todo, projectIndex, todoIndex, setCloseButton, handleInputChange, handleInputKeyDown, toggleTodoCompleteAtIndex, handleRemoveCommand} = props;\n\n\n    return <div className={`todo ${todo.isCompleted && 'todo-is-completed'}`}\n         onMouseEnter={() => setCloseButton(true, projectIndex, todoIndex)}\n         onMouseLeave={() => setCloseButton(false, projectIndex, todoIndex)}\n    >\n        {/* eslint-disable-next-line*/}\n        <div className=\"checkbox\"\n             onClick={() => toggleTodoCompleteAtIndex(projectIndex, todoIndex)}>\n            {todo.isCompleted && (\n                <span>&#x2714;</span>\n            )}\n        </div>\n        <input\n            id={`${projectIndex}-${todoIndex}`}\n            type=\"text\"\n            value={todo.content}\n            onChange={e => handleInputChange(e, projectIndex, todoIndex)}\n            onKeyDown={e => handleInputKeyDown(e, projectIndex, todoIndex)}\n        />\n        <button type=\"button\" className='close'\n                                        onClick={() => handleRemoveCommand(projectIndex, todoIndex)}\n        >X</button>\n    </div>\n}","import TodoItem from \"./TodoItem\";\nimport React from \"react\";\n\nexport default function TodoCategory(props) {\n    const {projectIndex, provided, project, handleInputChange, handleInputKeyDown, setCloseButton, toggleTodoCompleteAtIndex, handleRemoveCommand} = props;\n\n    return <div className=\"todo-category\"\n                key={projectIndex}\n                {...provided.draggableProps}\n                ref={provided.innerRef}\n    >\n                                            <span className=\"drag-handle\"\n                                                  {...provided.dragHandleProps}\n                                            >â‰¡</span>\n        <input\n            className=\"category-header\"\n            type=\"text\"\n            value={project.projectName}\n            onChange={e => handleInputChange(e, projectIndex)}\n            onKeyDown={e => handleInputKeyDown(e, projectIndex)}\n        />\n        <ul>\n            {project.todos.map((todo, todoIndex) => (\n                <li key={todoIndex}>\n                    <TodoItem\n                        {...{\n                            todo,\n                            projectIndex,\n                            todoIndex,\n                            setCloseButton,\n                            handleInputChange,\n                            handleInputKeyDown,\n                            toggleTodoCompleteAtIndex,\n                            handleRemoveCommand\n                        }}\n                    />\n                </li>\n            ))}\n        </ul>\n    </div>\n}","import React, {useState} from 'react';\nimport {TodosService} from \"./todosData\";\nimport './App.scss';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\nimport TodoCategory from \"./TodoCategory\";\n\nconst todoRepo = new TodosService();\n\nfunction App() {\n\n    const [todos, setState] = useState(() => todoRepo.getTodos());\n\n    /// helper function\n    function setTodos(newState) {\n        todoRepo.updateTodos(newState);\n        setState(newState);\n    }\n\n    function handleInputChange(e, projectIndex, todoIndex) {\n        const newState = [...todos];\n        if (typeof todoIndex !== 'undefined') {\n            // change in a todo\n            newState[projectIndex].todos[todoIndex].content = e.target.value;\n        } else {\n            // change in a project name\n            newState[projectIndex].projectName = e.target.value;\n        }\n        setTodos(newState);\n    }\n\n    function handleInputKeyDown(e, projectIndex, todoIndex) {\n        if (e.key === 'Enter') {\n            const tempState = [...todos];\n            if (typeof todoIndex !== 'undefined') {\n                // change in a todo\n                tempState[projectIndex].todos.splice(todoIndex + 1, 0, {content: '', isCompleted: false});\n                setTimeout(() => {\n                    document.getElementById(`${projectIndex}-${todoIndex + 1}`).focus()\n                }, 0);\n            } else {\n                // change in a project name\n                tempState[projectIndex].todos.splice(0, 0, {content: '', isCompleted: false});\n                setTimeout(() => {\n                    // document.forms[0].elements[projectIndex + 1].focus();\n                    document.getElementById(`${projectIndex}-0`).focus()\n                }, 0);\n            }\n            setTodos(tempState);\n        }\n    }\n\n    function handleRemoveCommand(projectIndex, todoIndex) {\n        const tempState = [...todos];\n        tempState[projectIndex].todos.splice(todoIndex, 1);\n        setTodos(tempState);\n    }\n\n    function toggleTodoCompleteAtIndex(projectIndex, todoIndex) {\n        const temporaryTodos = [...todos];\n        temporaryTodos[projectIndex].todos[todoIndex].isCompleted = !temporaryTodos[projectIndex].todos[todoIndex].isCompleted;\n        setTodos(temporaryTodos);\n    }\n\n    function setCloseButton(mode, projectIndex, todoIndex) {\n        // const tempState = [...todos];\n        // tempState[projectIndex].todos[todoIndex].showCloseButton = mode;\n        // setTodos(tempState);\n        const closeButton = document.getElementById(`${projectIndex}-${todoIndex}`).nextSibling;\n        closeButton.style.display = mode ? 'block' : 'none';\n    }\n\n    function onDragEnd(result) {\n        const {destination, source} = result;\n        const tempState = [...todos];\n        setTrashVisibility(false);\n\n        if (!destination) {\n            return;\n        } else if (destination.droppableId === 'trash') {\n            tempState.splice(parseInt(source.index.toString()), 1);\n            setTodos(tempState);\n            return;\n        }\n\n        if (destination.index === source.index) return;\n\n        tempState.splice(parseInt(source.index.toString()), 1);\n        tempState.splice(destination.index, 0, todos[source.index]);\n\n        setTodos(tempState);\n    }\n\n    function setTrashVisibility(mode) {\n        const el = document.getElementById('trash');\n        mode ? el.style.opacity = '1' : el.style.opacity = '0';\n    }\n\n    function createNewProject() {\n        const newState = [...todos];\n        newState.splice(0, 0, {\n                projectName: '',\n                todos: [\n                    {\n                        content: '',\n                        isCompleted: false,\n                    }\n                ]\n            }\n        );\n        setTodos(newState);\n    }\n\n    function removeCompletedTodos() {\n        const newState = [...todos];\n\n        todos.forEach((project) => {\n            project.todos = project.todos.filter((todo) => {\n                return !todo.isCompleted;\n            })\n        });\n\n        setTodos(newState);\n    }\n\n    function appReset() {\n        todoRepo.clearLocalStorage();\n        window.location.reload();\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <h2>React Todo App</h2>\n                <div className=\"buttons\">\n                    <button onClick={() => removeCompletedTodos()}>Remove Completed</button>\n                    <button onClick={() => createNewProject()}>Add new project</button>\n                    <button onClick={() => appReset()}>Clear Local Storage</button>\n                </div>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd} onDragStart={() => setTrashVisibility(true)}>\n                <Droppable droppableId=\"trash\">\n                    {(provided, snapshot) => (\n                        <div className={`trash ${snapshot.isDraggingOver ? 'active' : ''}`}\n                             ref={provided.innerRef}\n                             {...provided.droppableProps}\n                             id=\"trash\"\n                        >DELETE\n                            <div style={{display: 'none'}}>{provided.placeholder}</div>\n                        </div>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"todo-list\">\n                    {(provided) => (\n                        <form className=\"todo-list\"\n                              ref={provided.innerRef}\n                              {...provided.droppableProps}>\n                            <ul>\n                                {todos.map((project, projectIndex) => (\n                                    <li key={projectIndex}>\n                                        <Draggable\n                                            draggableId={projectIndex.toString()}\n                                            index={projectIndex}\n                                        >\n                                            {(provided) => (\n                                                <TodoCategory {...{\n                                                    projectIndex,\n                                                    provided,\n                                                    project,\n                                                    handleInputChange,\n                                                    handleInputKeyDown,\n                                                    setCloseButton,\n                                                    toggleTodoCompleteAtIndex,\n                                                    handleRemoveCommand\n                                                }}/>\n                                            )}\n                                        </Draggable>\n                                    </li>\n                                ))}\n                            </ul>\n                        </form>)}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}