{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","projectName","todos","content","isCompleted","setTodos","handleInputChange","e","projectIndex","todoIndex","newState","target","value","handleInputKeyDown","key","tempState","splice","setTimeout","document","forms","elements","focus","setCloseButton","mode","showCloseButton","setTrashVisibility","el","getElementById","style","opacity","className","onDragEnd","result","destination","source","droppableId","parseInt","index","toString","onDragStart","provided","snapshot","isDraggingOver","ref","innerRef","droppableProps","id","display","placeholder","map","project","draggableId","draggableProps","dragHandleProps","type","onChange","onKeyDown","todo","onMouseEnter","onMouseLeave","onClick","temporaryTodos","toggleTodoCompleteAtIndex","handleRemoveCommand","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ce0e498.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.scss';\nimport './Styles.scss';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\n\n\nfunction App() {\n\n    const [todos, setTodos] = useState([\n        {\n            projectName: 'Programming',\n            todos: [\n                {\n                    content: 'Learn Hooks',\n                    isCompleted: true,\n                },\n                {\n                    content: 'Style the app',\n                    isCompleted: true,\n                },\n                {\n                    content: 'Migrate to TypeScript',\n                    isCompleted: false,\n                },\n                {\n                    content: 'Create tests',\n                    isCompleted: true\n                }\n            ]\n        },\n        {\n            projectName: 'Chores',\n            todos: [\n                {\n                    content: 'Clean Keyboard',\n                    isCompleted: true,\n                },\n                {\n                    content: 'Walk Dog',\n                    isCompleted: false,\n                },\n                {\n                    content: 'Do dishes',\n                    isCompleted: false,\n                },\n            ]\n        },\n            {\n                projectName: 'Groceries',\n                todos: [\n                    {\n                        content: '1kg Carrots',\n                        isCompleted: false,\n                    },\n                    {\n                        content: '2 Cauliflowers',\n                        isCompleted: false,\n                    },\n                    {\n                        content: '1kg Button Mushrooms',\n                        isCompleted: false,\n                    },\n                ]\n            }\n    ]);\n\n    function handleInputChange(e, projectIndex, todoIndex) {\n        const newState = [...todos];\n        if (typeof todoIndex !== 'undefined') {\n            // change in a todo\n            newState[projectIndex].todos[todoIndex].content = e.target.value;\n        } else {\n            // change in a project name\n            newState[projectIndex].projectName = e.target.value;\n        }\n        setTodos(newState);\n    }\n\n    function handleInputKeyDown(e, projectIndex, todoIndex) {\n        if (e.key === 'Enter') {\n            const tempState = [...todos];\n            if (typeof todoIndex !== 'undefined') {\n                // change in a todo\n                tempState[projectIndex].todos.splice(todoIndex + 1, 0, {content: '', isCompleted: false});\n                setTimeout(() => {\n                    // document.forms[0].elements[i + 1].focus();\n                    document.forms[0].elements[projectIndex + todoIndex + 3].focus();\n                }, 0);\n            } else {\n                // change in a project name\n                tempState[projectIndex].todos.splice(0, 0, {content: '', isCompleted: false});\n                setTimeout(() => {\n                    document.forms[0].elements[projectIndex + 1].focus();\n                }, 0);\n            }\n            setTodos(tempState);\n        }\n    }\n\n    function handleRemoveCommand(projectIndex, todoIndex) {\n        const tempState = [...todos];\n        tempState[projectIndex].todos.splice(todoIndex, 1);\n        setTodos(tempState);\n    }\n\n    function toggleTodoCompleteAtIndex(projectIndex, todoIndex) {\n        const temporaryTodos = [...todos];\n        temporaryTodos[projectIndex].todos[todoIndex].isCompleted = !temporaryTodos[projectIndex].todos[todoIndex].isCompleted;\n        setTodos(temporaryTodos);\n    }\n\n    function setCloseButton(mode, projectIndex, todoIndex) {\n        const tempState = [...todos];\n        tempState[projectIndex].todos[todoIndex].showCloseButton = mode;\n        setTodos(tempState);\n    }\n\n    function onDragEnd(result) {\n        const {destination, source} = result;\n        const tempState = [...todos];\n        setTrashVisibility(false);\n\n        if (!destination) {\n            return;\n        } else if (destination.droppableId === 'trash') {\n            tempState.splice(parseInt(source.index.toString()), 1);\n            setTodos(tempState);\n            return;\n        }\n\n        if (destination.index === source.index) return;\n\n        tempState.splice(parseInt(source.index.toString()), 1);\n        tempState.splice(destination.index, 0, todos[source.index]);\n\n        setTodos(tempState);\n    }\n\n    function setTrashVisibility(mode) {\n        const el = document.getElementById('trash');\n        mode ? el.style.opacity = '1' : el.style.opacity = '0';\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <h2>React Todo App</h2>\n                <button>Clear Local Storage</button>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd} onDragStart={() => setTrashVisibility(true)}>\n                <Droppable droppableId=\"trash\">\n                    {(provided, snapshot) => (\n                        <div className={`trash ${snapshot.isDraggingOver ? 'active' : ''}`}\n                             ref={provided.innerRef}\n                             {...provided.droppableProps}\n                             id=\"trash\"\n                        >TRASHCAN\n                            <div style={{display: 'none'}}>{provided.placeholder}</div>\n                        </div>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"todo-list\">\n                    {(provided) => (\n                        <form className=\"todo-list\"\n                              ref={provided.innerRef}\n                              {...provided.droppableProps}>\n                            {provided.placeholder}\n                            {todos.map((project, projectIndex) => (\n                                <Draggable\n                                    key={projectIndex}\n                                    draggableId={projectIndex.toString()}\n                                    index={projectIndex}\n                                >\n                                    {(provided) => (\n                                        <div className=\"todo-category\"\n                                             key={projectIndex}\n                                             {...provided.draggableProps}\n                                             ref={provided.innerRef}\n                                        >\n                                            <span className=\"drag-handle\"\n                                                  {...provided.dragHandleProps}\n                                            >≡</span>\n                                            <input\n                                                className=\"category-header\"\n                                                type=\"text\"\n                                                value={project.projectName}\n                                                onChange={e => handleInputChange(e, projectIndex)}\n                                                onKeyDown={e => handleInputKeyDown(e, projectIndex)}\n                                            />\n                                            <ul>\n                                                {project.todos.map((todo, todoIndex) => (\n                                                    <div className={`todo ${todo.isCompleted && 'todo-is-completed'}`}\n                                                         key={todoIndex}\n                                                         onMouseEnter={() => setCloseButton(true, projectIndex, todoIndex)}\n                                                         onMouseLeave={() => setCloseButton(false, projectIndex, todoIndex)}\n                                                    >\n                                                        {/* eslint-disable-next-line*/}\n                                                        <div className=\"checkbox\"\n                                                             onClick={() => toggleTodoCompleteAtIndex(projectIndex, todoIndex)}>\n                                                            {todo.isCompleted && (\n                                                                <span>&#x2714;</span>\n                                                            )}\n                                                        </div>\n                                                        <input\n                                                            type=\"text\"\n                                                            value={todo.content}\n                                                            onChange={e => handleInputChange(e, projectIndex, todoIndex)}\n                                                            onKeyDown={e => handleInputKeyDown(e, projectIndex, todoIndex)}\n                                                        />\n                                                        {todo.showCloseButton ? <button type=\"button\" className='close'\n                                                                                        onClick={() => handleRemoveCommand(projectIndex, todoIndex)}\n                                                        >x</button> : null}\n                                                    </div>\n                                                ))}\n                                            </ul>\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                        </form>)}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}